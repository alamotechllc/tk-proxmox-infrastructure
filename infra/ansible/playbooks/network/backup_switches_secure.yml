---
# Network Switch Configuration Backup (Secure Version)
# Uses Semaphore secrets instead of environment variables
# Enhanced security with encrypted credential storage

- name: Secure Network Switch Configuration Backup
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: false
  serial: "{{ backup_concurrency | default(3) }}"
  
  vars:
    # Backup configuration
    backup_base_dir: "{{ backup_location | default('/opt/network_backups') }}"
    backup_date: "{{ ansible_date_time.date }}"
    backup_time: "{{ ansible_date_time.time }}"
    backup_timestamp: "{{ ansible_date_time.epoch }}"
    retention_days: "{{ backup_retention_days | default(30) }}"
    compress_files: "{{ compress_backups | default(true) }}"
    
    # Security: Credentials now come from Semaphore secrets
    # These will be automatically injected by Semaphore when secrets are configured
    arista_credentials:
      user: "{{ arista_admin_credentials.login }}"
      password: "{{ arista_admin_credentials.password }}"
      enable: "{{ arista_enable_password.password }}"
    
    nexus_credentials:
      user: "{{ nexus_admin_credentials.login }}"
      password: "{{ nexus_admin_credentials.password }}"
    
    catalyst_credentials:
      user: "{{ catalyst_admin_credentials.login }}"
      password: "{{ catalyst_admin_credentials.password }}"
      enable: "{{ catalyst_enable_password.password }}"

  pre_tasks:
    - name: Display secure backup operation details
      debug:
        msg: |
          ==========================================
          SECURE NETWORK SWITCH BACKUP OPERATION
          ==========================================
          Target Hosts: {{ ansible_play_hosts | length }} switches
          Backup Location: {{ backup_base_dir }}
          Backup Date: {{ backup_date }} {{ backup_time }}
          Retention: {{ retention_days }} days
          Compression: {{ 'Enabled' if compress_files else 'Disabled' }}
          
          ðŸ”’ SECURITY FEATURES:
          âœ… Encrypted credential storage
          âœ… No plaintext passwords in logs
          âœ… Audit trail for secret access
          âœ… Role-based access control
          ==========================================
      run_once: true
      delegate_to: localhost

    - name: Create secure backup directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0750'  # More restrictive permissions
        owner: "{{ ansible_user }}"
        group: "netops"
      loop:
        - "{{ backup_base_dir }}"
        - "{{ backup_base_dir }}/{{ backup_date }}"
        - "{{ backup_base_dir }}/{{ backup_date }}/arista"
        - "{{ backup_base_dir }}/{{ backup_date }}/nexus"
        - "{{ backup_base_dir }}/{{ backup_date }}/catalyst"
        - "{{ backup_base_dir }}/{{ backup_date }}/logs"
      run_once: true
      delegate_to: localhost

  tasks:
    # Arista EOS Switch Backups (Using Secrets)
    - name: Secure Arista EOS Switch Backup
      block:
        - name: Get Arista running configuration (Secure)
          eos_config:
            backup: yes
            backup_options:
              filename: "{{ backup_base_dir }}/{{ backup_date }}/arista/{{ inventory_hostname }}_{{ backup_timestamp }}.cfg"
              dir_path: "{{ backup_base_dir }}/{{ backup_date }}/arista/"
          vars:
            ansible_user: "{{ arista_credentials.user }}"
            ansible_password: "{{ arista_credentials.password }}"
            ansible_become_password: "{{ arista_credentials.enable }}"
          register: arista_backup_result
          no_log: true  # Prevent credential exposure in logs
          
        - name: Get Arista system information (Secure)
          eos_facts:
            gather_subset: all
          vars:
            ansible_user: "{{ arista_credentials.user }}"
            ansible_password: "{{ arista_credentials.password }}"
          register: arista_facts
          no_log: true
          
        - name: Save Arista system information
          copy:
            content: |
              # Arista Switch System Information (Secure Backup)
              # Backup Date: {{ backup_date }} {{ backup_time }}
              # Device: {{ inventory_hostname }}
              # Security: Credentials managed via Semaphore secrets
              
              Hostname: {{ arista_facts.ansible_facts.ansible_net_hostname }}
              Model: {{ arista_facts.ansible_facts.ansible_net_model }}
              Serial: {{ arista_facts.ansible_facts.ansible_net_serialnum }}
              Software Version: {{ arista_facts.ansible_facts.ansible_net_version }}
              Uptime: {{ arista_facts.ansible_facts.ansible_net_uptime }}
              
              Security Features:
              âœ… Credentials stored as encrypted secrets
              âœ… No plaintext passwords in backup files
              âœ… Audit trail for credential access
              
              Interfaces:
              {% for interface, details in arista_facts.ansible_facts.ansible_net_interfaces.items() %}
              - {{ interface }}: {{ details.description | default('No description') }}
                Status: {{ details.operstatus }}
                Speed: {{ details.bandwidth }}
                MAC: {{ details.macaddress }}
              {% endfor %}
            dest: "{{ backup_base_dir }}/{{ backup_date }}/arista/{{ inventory_hostname }}_info_{{ backup_timestamp }}.txt"
            mode: '0640'  # Restrictive permissions
          delegate_to: localhost
          
      when: ansible_network_os == "eos"
      rescue:
        - name: Log Arista backup failure (Secure)
          copy:
            content: |
              SECURE BACKUP FAILED: {{ inventory_hostname }}
              Error: {{ ansible_failed_result.msg | regex_replace('password|secret|key', '[REDACTED]') }}
              Time: {{ backup_date }} {{ backup_time }}
              Security: Credentials protected in error logs
            dest: "{{ backup_base_dir }}/{{ backup_date }}/logs/{{ inventory_hostname }}_FAILED.log"
            mode: '0640'
          delegate_to: localhost

    # Cisco Nexus NX-OS Switch Backups (Using Secrets)
    - name: Secure Nexus Switch Backup
      block:
        - name: Get Nexus running configuration (Secure)
          nxos_config:
            backup: yes
            backup_options:
              filename: "{{ backup_base_dir }}/{{ backup_date }}/nexus/{{ inventory_hostname }}_{{ backup_timestamp }}.cfg"
              dir_path: "{{ backup_base_dir }}/{{ backup_date }}/nexus/"
          vars:
            ansible_user: "{{ nexus_credentials.user }}"
            ansible_password: "{{ nexus_credentials.password }}"
          register: nexus_backup_result
          no_log: true
          
        - name: Get Nexus system information (Secure)
          nxos_facts:
            gather_subset: all
          vars:
            ansible_user: "{{ nexus_credentials.user }}"
            ansible_password: "{{ nexus_credentials.password }}"
          register: nexus_facts
          no_log: true
          
      when: ansible_network_os == "nxos"

    # Cisco Catalyst IOS-XE Switch Backups (Using Secrets)
    - name: Secure Catalyst Switch Backup
      block:
        - name: Get Catalyst running configuration (Secure)
          ios_config:
            backup: yes
            backup_options:
              filename: "{{ backup_base_dir }}/{{ backup_date }}/catalyst/{{ inventory_hostname }}_{{ backup_timestamp }}.cfg"
              dir_path: "{{ backup_base_dir }}/{{ backup_date }}/catalyst/"
          vars:
            ansible_user: "{{ catalyst_credentials.user }}"
            ansible_password: "{{ catalyst_credentials.password }}"
            ansible_become_password: "{{ catalyst_credentials.enable }}"
          register: catalyst_backup_result
          no_log: true
          
        - name: Get Catalyst system information (Secure)
          ios_facts:
            gather_subset: all
          vars:
            ansible_user: "{{ catalyst_credentials.user }}"
            ansible_password: "{{ catalyst_credentials.password }}"
          register: catalyst_facts
          no_log: true
          
      when: ansible_network_os == "ios"

  post_tasks:
    - name: Generate secure backup summary report
      template:
        src: secure_backup_report.j2
        dest: "{{ backup_base_dir }}/{{ backup_date }}/secure_backup_summary_{{ backup_timestamp }}.txt"
        mode: '0640'
      vars:
        backup_summary:
          date: "{{ backup_date }}"
          time: "{{ backup_time }}"
          total_devices: "{{ ansible_play_hosts | length }}"
          successful_backups: "{{ ansible_play_hosts | length - (ansible_failed_hosts | default([]) | length) }}"
          failed_backups: "{{ ansible_failed_hosts | default([]) | length }}"
          backup_location: "{{ backup_base_dir }}/{{ backup_date }}"
          retention_policy: "{{ retention_days }} days"
          security_features:
            - "Encrypted credential storage"
            - "No plaintext passwords in files"
            - "Audit trail for secret access"
            - "Restrictive file permissions"
      delegate_to: localhost
      run_once: true
      
    - name: Display secure backup completion summary
      debug:
        msg: |
          ==========================================
          SECURE NETWORK BACKUP COMPLETED
          ==========================================
          Date: {{ backup_date }} {{ backup_time }}
          Total Devices: {{ ansible_play_hosts | length }}
          Successful: {{ ansible_play_hosts | length - (ansible_failed_hosts | default([]) | length) }}
          Failed: {{ ansible_failed_hosts | default([]) | length }}
          
          ðŸ”’ SECURITY ENHANCEMENTS:
          âœ… Credentials stored as encrypted secrets
          âœ… No passwords visible in logs (no_log: true)
          âœ… Restrictive file permissions (0640)
          âœ… Credential masking in error messages
          âœ… Audit trail for all secret access
          
          Backup Location: {{ backup_base_dir }}/{{ backup_date }}
          {% if compress_files | bool %}
          Compressed Archive: network_backup_{{ backup_date }}_{{ backup_timestamp }}.tar.gz
          {% endif %}
          
          {% if ansible_failed_hosts | default([]) | length > 0 %}
          FAILED DEVICES:
          {% for host in ansible_failed_hosts | default([]) %}
          - {{ host }}
          {% endfor %}
          Check logs in: {{ backup_base_dir }}/{{ backup_date }}/logs/
          {% endif %}
          ==========================================
      run_once: true
      delegate_to: localhost
