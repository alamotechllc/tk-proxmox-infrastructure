---
# Network Device Credential Verification Runbook
# Tests connectivity and authentication to all network devices
# Uses unified credentials: admin / 8fewWER8382

- name: Network Device Credential Verification
  hosts: "{{ target_devices | default('all') }}"
  gather_facts: false
  serial: "{{ verification_concurrency | default(5) }}"
  
  vars:
    # Unified credentials for all devices
    network_admin_user: "admin"
    network_admin_pass: "8fewWER8382"
    network_enable_pass: "8fewWER8382"  # Same password for enable
    
    # Test configuration
    connection_timeout: 30
    max_retries: 3
    verify_commands:
      basic: ["show version", "show hostname"]
      detailed: ["show interface status", "show vlan brief"]

  pre_tasks:
    - name: Display credential verification operation
      debug:
        msg: |
          ==========================================
          NETWORK CREDENTIAL VERIFICATION
          ==========================================
          Target Devices: {{ ansible_play_hosts | length }} devices
          Credentials: admin / 8fewWER8382 (unified)
          Timeout: {{ connection_timeout }} seconds
          Retries: {{ max_retries }}
          
          üîç VERIFICATION TESTS:
          ‚úÖ SSH connectivity
          ‚úÖ Authentication success
          ‚úÖ Privilege escalation (enable)
          ‚úÖ Basic command execution
          ‚úÖ Device information gathering
          ==========================================
      run_once: true
      delegate_to: localhost

    - name: Create verification results directory
      file:
        path: "/tmp/credential_verification"
        state: directory
        mode: '0755'
      run_once: true
      delegate_to: localhost

  tasks:
    # Test basic connectivity and authentication
    - name: Test device connectivity and authentication
      block:
        # Arista EOS devices
        - name: Verify Arista EOS device credentials
          block:
            - name: Test Arista authentication and basic commands
              eos_command:
                commands:
                  - "show version"
                  - "show hostname"
                  - "show interfaces status"
              vars:
                ansible_user: "{{ network_admin_user }}"
                ansible_password: "{{ network_admin_pass }}"
                ansible_become_password: "{{ network_enable_pass }}"
                ansible_connection: network_cli
                ansible_network_os: eos
                ansible_timeout: "{{ connection_timeout }}"
              register: arista_test_result
              
            - name: Get Arista device information
              eos_facts:
                gather_subset: ["hardware", "interfaces"]
              vars:
                ansible_user: "{{ network_admin_user }}"
                ansible_password: "{{ network_admin_pass }}"
                ansible_connection: network_cli
                ansible_network_os: eos
              register: arista_facts
              
          when: device_type is defined and device_type == "arista_eos"
          rescue:
            - name: Log Arista authentication failure
              set_fact:
                auth_failed: true
                auth_error: "{{ ansible_failed_result.msg }}"

        # Cisco Nexus NX-OS devices  
        - name: Verify Nexus NX-OS device credentials
          block:
            - name: Test Nexus authentication and basic commands
              nxos_command:
                commands:
                  - "show version"
                  - "show hostname"
                  - "show interface status"
              vars:
                ansible_user: "{{ network_admin_user }}"
                ansible_password: "{{ network_admin_pass }}"
                ansible_connection: network_cli
                ansible_network_os: nxos
                ansible_timeout: "{{ connection_timeout }}"
              register: nexus_test_result
              
            - name: Get Nexus device information
              nxos_facts:
                gather_subset: ["hardware", "interfaces"]
              vars:
                ansible_user: "{{ network_admin_user }}"
                ansible_password: "{{ network_admin_pass }}"
                ansible_connection: network_cli
                ansible_network_os: nxos
              register: nexus_facts
              
          when: device_type is defined and device_type == "cisco_nxos"
          rescue:
            - name: Log Nexus authentication failure
              set_fact:
                auth_failed: true
                auth_error: "{{ ansible_failed_result.msg }}"

        # Cisco Catalyst IOS-XE devices
        - name: Verify Catalyst IOS device credentials
          block:
            - name: Test Catalyst authentication and basic commands
              ios_command:
                commands:
                  - "show version"
                  - "show hostname" 
                  - "show interface status"
              vars:
                ansible_user: "{{ network_admin_user }}"
                ansible_password: "{{ network_admin_pass }}"
                ansible_become_password: "{{ network_enable_pass }}"
                ansible_connection: network_cli
                ansible_network_os: ios
                ansible_timeout: "{{ connection_timeout }}"
              register: catalyst_test_result
              
            - name: Get Catalyst device information
              ios_facts:
                gather_subset: ["hardware", "interfaces"]
              vars:
                ansible_user: "{{ network_admin_user }}"
                ansible_password: "{{ network_admin_pass }}"
                ansible_become_password: "{{ network_enable_pass }}"
                ansible_connection: network_cli
                ansible_network_os: ios
              register: catalyst_facts
              
          when: device_type is defined and device_type == "cisco_ios"
          rescue:
            - name: Log Catalyst authentication failure
              set_fact:
                auth_failed: true
                auth_error: "{{ ansible_failed_result.msg }}"

        # OPNsense Firewall (SSH-based)
        - name: Verify OPNsense firewall credentials
          block:
            - name: Test OPNsense SSH authentication
              shell: |
                ssh -o ConnectTimeout={{ connection_timeout }} \
                    -o StrictHostKeyChecking=no \
                    -o UserKnownHostsFile=/dev/null \
                    {{ network_admin_user }}@{{ ansible_host }} \
                    "uname -a && hostname && ifconfig | grep inet"
              vars:
                ansible_ssh_pass: "{{ network_admin_pass }}"
              register: opnsense_test_result
              delegate_to: localhost
              
          when: device_type is defined and device_type == "opnsense"
          rescue:
            - name: Log OPNsense authentication failure
              set_fact:
                auth_failed: true
                auth_error: "{{ ansible_failed_result.msg }}"

    # Generate device verification report
    - name: Generate device verification report
      copy:
        content: |
          ==========================================
          DEVICE CREDENTIAL VERIFICATION REPORT
          ==========================================
          
          Device Information:
            Hostname: {{ inventory_hostname }}
            IP Address: {{ ansible_host }}
            Device Type: {{ device_type | default('Unknown') }}
            Test Date: {{ ansible_date_time.iso8601 }}
          
          Authentication Test:
            Username: {{ network_admin_user }}
            Password: [VERIFIED - 8fewWER8382]
            Status: {% if auth_failed is not defined %}‚úÖ SUCCESS{% else %}‚ùå FAILED{% endif %}
            {% if auth_failed is defined %}
            Error: {{ auth_error | regex_replace('password|8fewWER8382', '[REDACTED]') }}
            {% endif %}
          
          {% if auth_failed is not defined %}
          Device Details:
          {% if arista_facts is defined %}
            Model: {{ arista_facts.ansible_facts.ansible_net_model }}
            Serial: {{ arista_facts.ansible_facts.ansible_net_serialnum }}
            OS Version: {{ arista_facts.ansible_facts.ansible_net_version }}
            Uptime: {{ arista_facts.ansible_facts.ansible_net_uptime }}
          {% elif nexus_facts is defined %}
            Model: {{ nexus_facts.ansible_facts.ansible_net_model }}
            Serial: {{ nexus_facts.ansible_facts.ansible_net_serialnum }}
            OS Version: {{ nexus_facts.ansible_facts.ansible_net_version }}
            Uptime: {{ nexus_facts.ansible_facts.ansible_net_uptime }}
          {% elif catalyst_facts is defined %}
            Model: {{ catalyst_facts.ansible_facts.ansible_net_model }}
            Serial: {{ catalyst_facts.ansible_facts.ansible_net_serialnum }}
            OS Version: {{ catalyst_facts.ansible_facts.ansible_net_version }}
            Uptime: {{ catalyst_facts.ansible_facts.ansible_net_uptime }}
          {% elif opnsense_test_result is defined %}
            System Info: {{ opnsense_test_result.stdout | regex_replace('\\n', ' | ') }}
          {% endif %}
          
          Command Execution Test:
          {% if arista_test_result is defined %}
          ‚úÖ Arista commands executed successfully
          {% elif nexus_test_result is defined %}
          ‚úÖ Nexus commands executed successfully
          {% elif catalyst_test_result is defined %}
          ‚úÖ Catalyst commands executed successfully
          {% elif opnsense_test_result is defined %}
          ‚úÖ OPNsense commands executed successfully
          {% endif %}
          {% endif %}
          
          Recommendations:
          {% if auth_failed is not defined %}
          ‚úÖ Credentials are working correctly
          ‚úÖ Device is ready for automation
          ‚úÖ Can proceed with secret migration
          {% else %}
          ‚ùå Credential verification failed
          üîß Check network connectivity
          üîß Verify username/password
          üîß Check device configuration
          {% endif %}
          
          ==========================================
        dest: "/tmp/credential_verification/{{ inventory_hostname }}_verification_{{ ansible_date_time.epoch }}.log"
      delegate_to: localhost

  post_tasks:
    - name: Generate overall verification summary
      copy:
        content: |
          ==========================================
          NETWORK CREDENTIAL VERIFICATION SUMMARY
          ==========================================
          
          Verification Details:
            Date/Time: {{ ansible_date_time.iso8601 }}
            Total Devices: {{ ansible_play_hosts | length }}
            Successful: {{ ansible_play_hosts | length - (ansible_failed_hosts | default([]) | length) }}
            Failed: {{ ansible_failed_hosts | default([]) | length }}
            Success Rate: {{ ((ansible_play_hosts | length - (ansible_failed_hosts | default([]) | length)) / ansible_play_hosts | length * 100) | round(1) }}%
          
          Unified Credentials:
            Username: admin
            Password: 8fewWER8382
            Enable Password: 8fewWER8382
          
          Device Breakdown:
          {% for host in ansible_play_hosts %}
          - {{ host }}: {% if host in (ansible_failed_hosts | default([])) %}‚ùå FAILED{% else %}‚úÖ SUCCESS{% endif %}
          {% endfor %}
          
          {% if ansible_failed_hosts | default([]) | length > 0 %}
          Failed Devices Analysis:
          {% for host in ansible_failed_hosts | default([]) %}
          - {{ host }}: Check /tmp/credential_verification/{{ host }}_verification_*.log
          {% endfor %}
          
          Common Failure Causes:
          ‚Ä¢ Network connectivity issues
          ‚Ä¢ Device not configured with these credentials
          ‚Ä¢ SSH/management interface disabled
          ‚Ä¢ Firewall blocking management access
          {% endif %}
          
          Next Steps:
          {% if ansible_failed_hosts | default([]) | length == 0 %}
          ‚úÖ All devices verified successfully
          ‚úÖ Ready to create Semaphore secrets
          ‚úÖ Can proceed with secure automation
          
          Recommended Actions:
          1. Create secrets in Semaphore with verified credentials
          2. Update playbooks to use secrets
          3. Remove environment variables
          4. Test automated operations
          {% else %}
          ‚ö†Ô∏è  Some devices failed verification
          
          Required Actions:
          1. Fix connectivity issues for failed devices
          2. Verify credentials on failed devices
          3. Re-run verification for failed devices only
          4. Proceed with secret creation for successful devices
          {% endif %}
          
          ==========================================
        dest: "/tmp/credential_verification/verification_summary_{{ ansible_date_time.epoch }}.log"
      run_once: true
      delegate_to: localhost

    - name: Display verification completion
      debug:
        msg: |
          ==========================================
          CREDENTIAL VERIFICATION COMPLETED
          ==========================================
          
          üìä Results Summary:
          Total Devices: {{ ansible_play_hosts | length }}
          Successful: {{ ansible_play_hosts | length - (ansible_failed_hosts | default([]) | length) }}
          Failed: {{ ansible_failed_hosts | default([]) | length }}
          
          üîê Verified Credentials:
          Username: admin
          Password: 8fewWER8382 ‚úÖ
          
          üìÅ Reports Generated:
          ‚Ä¢ Individual device reports: /tmp/credential_verification/[device]_verification_*.log
          ‚Ä¢ Summary report: /tmp/credential_verification/verification_summary_*.log
          
          {% if ansible_failed_hosts | default([]) | length == 0 %}
          üéâ ALL DEVICES VERIFIED SUCCESSFULLY!
          
          Next Steps:
          1. Create secrets in Semaphore
          2. Update automation playbooks
          3. Begin secure operations
          {% else %}
          ‚ö†Ô∏è  DEVICES REQUIRING ATTENTION:
          {% for host in ansible_failed_hosts | default([]) %}
          - {{ host }}
          {% endfor %}
          
          Next Steps:
          1. Fix issues with failed devices
          2. Re-run verification
          3. Create secrets for working devices
          {% endif %}
          ==========================================
      run_once: true
      delegate_to: localhost
